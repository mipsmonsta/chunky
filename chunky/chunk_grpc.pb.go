// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chunky

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChunkUploadServiceClient is the client API for ChunkUploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChunkUploadServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (ChunkUploadService_UploadClient, error)
}

type chunkUploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkUploadServiceClient(cc grpc.ClientConnInterface) ChunkUploadServiceClient {
	return &chunkUploadServiceClient{cc}
}

func (c *chunkUploadServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (ChunkUploadService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChunkUploadService_ServiceDesc.Streams[0], "/ChunkUploadService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkUploadServiceUploadClient{stream}
	return x, nil
}

type ChunkUploadService_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type chunkUploadServiceUploadClient struct {
	grpc.ClientStream
}

func (x *chunkUploadServiceUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chunkUploadServiceUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChunkUploadServiceServer is the server API for ChunkUploadService service.
// All implementations must embed UnimplementedChunkUploadServiceServer
// for forward compatibility
type ChunkUploadServiceServer interface {
	Upload(ChunkUploadService_UploadServer) error
	mustEmbedUnimplementedChunkUploadServiceServer()
}

// UnimplementedChunkUploadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChunkUploadServiceServer struct {
}

func (UnimplementedChunkUploadServiceServer) Upload(ChunkUploadService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedChunkUploadServiceServer) mustEmbedUnimplementedChunkUploadServiceServer() {}

// UnsafeChunkUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkUploadServiceServer will
// result in compilation errors.
type UnsafeChunkUploadServiceServer interface {
	mustEmbedUnimplementedChunkUploadServiceServer()
}

func RegisterChunkUploadServiceServer(s grpc.ServiceRegistrar, srv ChunkUploadServiceServer) {
	s.RegisterService(&ChunkUploadService_ServiceDesc, srv)
}

func _ChunkUploadService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChunkUploadServiceServer).Upload(&chunkUploadServiceUploadServer{stream})
}

type ChunkUploadService_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type chunkUploadServiceUploadServer struct {
	grpc.ServerStream
}

func (x *chunkUploadServiceUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chunkUploadServiceUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChunkUploadService_ServiceDesc is the grpc.ServiceDesc for ChunkUploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkUploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChunkUploadService",
	HandlerType: (*ChunkUploadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _ChunkUploadService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "chunk.proto",
}
